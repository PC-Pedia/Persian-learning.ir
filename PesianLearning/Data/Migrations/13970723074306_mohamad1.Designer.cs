// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PesianLearning.Data;

namespace PesianLearning.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("13970723074306_mohamad1")]
    partial class mohamad1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("Title")
                        .HasName("IX_Title");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CateID");

                    b.Property<int>("Count");

                    b.Property<int?>("CourseID");

                    b.Property<int>("CourseStateID");

                    b.Property<int>("CourseTypeID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("ProfessorID");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("TitleFa")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UserID");

                    b.Property<int>("Visit");

                    b.HasKey("ID");

                    b.HasIndex("CateID")
                        .HasName("Fk_Inx_Cat");

                    b.HasIndex("CourseID");

                    b.HasIndex("CourseStateID");

                    b.HasIndex("CourseTypeID");

                    b.HasIndex("ProfessorID");

                    b.HasIndex("UserID")
                        .HasName("Fk_Inx_User");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Models.CourseState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("Title")
                        .HasName("IX_Title");

                    b.ToTable("CourseStates");
                });

            modelBuilder.Entity("Models.CourseType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("Title")
                        .HasName("IX_Title");

                    b.ToTable("CourseTypes");
                });

            modelBuilder.Entity("Models.GroupShoping", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<int>("OrderID");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("OrderID");

                    b.ToTable("groupShopings");
                });

            modelBuilder.Entity("Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt")
                        .HasMaxLength(100);

                    b.Property<int?>("CategoryID");

                    b.Property<int?>("CourseID")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("ServerID");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID")
                        .IsUnique()
                        .HasFilter("[CategoryID] IS NOT NULL");

                    b.HasIndex("CourseID");

                    b.HasIndex("ServerID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Models.Menu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParrentID");

                    b.Property<int>("Sort");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Models.Messages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminID");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Ip")
                        .HasMaxLength(50);

                    b.Property<bool>("IsReplay");

                    b.Property<bool>("Read");

                    b.Property<string>("Text");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("UserAdminId");

                    b.Property<string>("UserClaintId");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserAdminId");

                    b.HasIndex("UserClaintId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Models.MinorTopic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TimeTopic");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TopicID");

                    b.HasKey("ID");

                    b.HasIndex("TopicID");

                    b.ToTable("MinorTopic");
                });

            modelBuilder.Entity("Models.NewsLetter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("NewsLetters");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankGetNumber")
                        .HasMaxLength(50);

                    b.Property<string>("BankTransNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Descreption");

                    b.Property<string>("PostBarCode")
                        .HasMaxLength(50);

                    b.Property<string>("Price");

                    b.Property<int>("Status");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .HasName("IX_User");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Models.Price", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Pric")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Models.Professor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Evidence")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TopSkill")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("Models.ProfSkill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProfID");

                    b.Property<int>("SkillID");

                    b.HasKey("ID");

                    b.HasIndex("ProfID");

                    b.HasIndex("SkillID");

                    b.ToTable("profSkills");
                });

            modelBuilder.Entity("Models.Server", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Models.Settings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoonValue");

                    b.Property<string>("Brand")
                        .HasMaxLength(100);

                    b.Property<int>("CountAskPerPage");

                    b.Property<int>("CountCommentPerPage");

                    b.Property<string>("FavoIcon")
                        .HasMaxLength(100);

                    b.Property<bool>("OnlyShowConfirmedComment");

                    b.Property<string>("SiteDescreption")
                        .HasMaxLength(200);

                    b.Property<string>("SiteKeyWords")
                        .HasMaxLength(100);

                    b.Property<string>("SiteTitle")
                        .HasMaxLength(100);

                    b.Property<int>("Tax");

                    b.Property<int>("ValidBoonPerDay");

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Models.ShopingCart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<DateTime>("Date");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CourseID")
                        .HasName("IX_ShopCourse");

                    b.HasIndex("UserID");

                    b.ToTable("ShopingCarts");
                });

            modelBuilder.Entity("Models.Skill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Models.Slider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImageID");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("Sort");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.HasIndex("ImageID");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("Models.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasMaxLength(300);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<string>("Family")
                        .HasMaxLength(100);

                    b.Property<int?>("ImageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15);

                    b.Property<string>("Province")
                        .HasMaxLength(100);

                    b.HasIndex("ImageID");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Course", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Course", "CourseBefore")
                        .WithMany()
                        .HasForeignKey("CourseID");

                    b.HasOne("Models.CourseState", "CourseState")
                        .WithMany("Courses")
                        .HasForeignKey("CourseStateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.CourseType", "CourseType")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Professor", "professor")
                        .WithMany()
                        .HasForeignKey("ProfessorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.ApplicationUser", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Models.GroupShoping", b =>
                {
                    b.HasOne("Models.Course", "Course")
                        .WithMany("GroupShopings")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Order", "Order")
                        .WithMany("GroupShopings")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Image", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithOne("Image")
                        .HasForeignKey("Models.Image", "CategoryID");

                    b.HasOne("Models.Course", "Course")
                        .WithMany("Images")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Server", "Server")
                        .WithMany("Images")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Messages", b =>
                {
                    b.HasOne("Models.ApplicationUser", "UserAdmin")
                        .WithMany()
                        .HasForeignKey("UserAdminId");

                    b.HasOne("Models.ApplicationUser", "UserClaint")
                        .WithMany()
                        .HasForeignKey("UserClaintId");
                });

            modelBuilder.Entity("Models.MinorTopic", b =>
                {
                    b.HasOne("Models.Topic", "Topic")
                        .WithMany("MinorTopics")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.NewsLetter", b =>
                {
                    b.HasOne("Models.ApplicationUser", "User")
                        .WithMany("NewsLetter")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.HasOne("Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Models.Price", b =>
                {
                    b.HasOne("Models.Course", "Course")
                        .WithMany("Prices")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ProfSkill", b =>
                {
                    b.HasOne("Models.Professor", "professor")
                        .WithMany("ProfSkills")
                        .HasForeignKey("ProfID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Skill", "Skill")
                        .WithMany("ProfSkills")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ShopingCart", b =>
                {
                    b.HasOne("Models.Course", "Course")
                        .WithMany("ShopingCarts")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.ApplicationUser", "User")
                        .WithMany("ShopingCart")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Models.Slider", b =>
                {
                    b.HasOne("Models.Image", "Image")
                        .WithMany("Slider")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Topic", b =>
                {
                    b.HasOne("Models.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ApplicationUser", b =>
                {
                    b.HasOne("Models.Image", "ImageProfile")
                        .WithMany()
                        .HasForeignKey("ImageID");
                });
#pragma warning restore 612, 618
        }
    }
}
